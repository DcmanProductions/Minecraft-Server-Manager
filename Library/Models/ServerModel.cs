using ChaseLabs.CLConfiguration.List;
using com.drewchaseproject.net.asp.mc.OlegMC.Library.Utilities;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net.Http.Headers;
using System.Reflection.Metadata;
using System.Threading;
using System.Threading.Tasks;
using static com.drewchaseproject.net.asp.mc.OlegMC.Library.Data.Values;

namespace com.drewchaseproject.net.asp.mc.OlegMC.Library.Models
{
    public class ServerModel
    {
        public ConfigManager Manifest { get; set; }

        public string ServerDirectory
        {
            get
            {
                return Directory.GetParent(Manifest.PATH).FullName;
            }
        }

        public Process ServerProcess { private set; get; }

        public string[] Jars
        {
            get
            {
                List<string> l = new List<string>();
                foreach (string s in Directory.GetFiles(ServerDirectory, "*.jar", SearchOption.TopDirectoryOnly))
                {
                    l.Add(s);
                }
                return l.ToArray();
            }
        }

        public bool AcceptedEULA
        {
            get
            {
                try
                {

                    using (var reader = new StreamReader(Path.Combine(ServerDirectory, "eula.txt")))
                    {
                        while (!reader.EndOfStream)
                        {
                            string text = reader.ReadLine();
                            if (text.StartsWith("#")) continue;
                            if (text.StartsWith("eula=")) return !bool.TryParse(text.Replace("eula=", "").Trim(), out bool b) ? false : b;
                        }
                    }
                }
                catch (FileNotFoundException)
                {
                    return false;
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.StackTrace);
                    return false;
                }
                return false;
            }

            set
            {
                using (var writer = new StreamWriter(Path.Combine(ServerDirectory, "eula.txt"), false))
                {
                    writer.WriteLine("# Generated by Oleg MC");
                    writer.WriteLine("#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula).");
                    writer.WriteLine($"#{DateTime.UtcNow}");
                    writer.Write($"eula={value.ToString().ToLower()}");
                    writer.Flush();
                    writer.Dispose();
                    writer.Close();
                }
            }
        }

        public int CurrentPlayers { get; set; }
        public decimal CurrentRamUsage { get; set; }

        private ServerPropertyList _serverProperties = null;
        public ServerPropertyList ServerProperties
        {
            get
            {
                if (_serverProperties == null)
                    _serverProperties = new ServerPropertyList(Path.Combine(ServerDirectory, "server.properties"));
                return _serverProperties;
            }
        }

        public string JavaArguments
        {
            get
            {
                return Manifest.GetConfigByKey("JavaArgument").Value;
            }
            set
            {
                Manifest.GetConfigByKey("JavaArgument").Value = value;
            }
        }
        public string MinecraftArguments
        {
            get
            {
                return Manifest.GetConfigByKey("MinecraftArgument").Value;
            }
            set
            {
                if (value == null) value = "nogui";
                if (value == "") value = "nogui";
                if (!value.Contains("nogui")) value += " nogui";
                Manifest.GetConfigByKey("MinecraftArgument").Value = value;
            }
        }
        public string MaxRam
        {
            get
            {
                return Manifest.GetConfigByKey("MaxRam").Value;
            }
            set
            {
                Manifest.GetConfigByKey("MaxRam").Value = value;
            }
        }
        public string MinRam
        {
            get
            {
                return Manifest.GetConfigByKey("MinRam").Value;
            }
            set
            {
                Manifest.GetConfigByKey("MinRam").Value = value;
            }
        }

        public string Name
        {
            get
            {
                return Manifest.GetConfigByKey("Name").Value;
            }
            set
            {
                Manifest.GetConfigByKey("Name").Value = value;
            }
        }
        public int Port
        {
            get
            {
                ServerProperties.Read();
                return int.Parse(ServerProperties.GetPropertyByKey("server-port", "25565").Value.ToString());
            }
            set
            {
                ServerProperties.SetValue("server-port", value);
            }
        }
        public string LevelName
        {
            get
            {
                ServerProperties.Read();
                return ServerProperties.GetPropertyByKey("level-name", "world").Value.ToString();
            }
            set
            {
                ServerProperties.SetValue("level-name", value);
            }
        }
        public string Seed
        {
            get
            {
                ServerProperties.Read();
                return ServerProperties.GetPropertyByKey("level-seed", "").Value.ToString();
            }
            set
            {
                ServerProperties.SetValue("level-seed", value);
            }
        }
        public int MaxPlayers
        {
            get
            {
                ServerProperties.Read();
                if (int.Parse(ServerProperties.GetPropertyByKey("max-players", "20").Value.ToString()) == 0) MaxPlayers = 20;
                return int.Parse(ServerProperties.GetPropertyByKey("max-players", "20").Value.ToString());
            }
            set
            {
                ServerProperties.SetValue("max-players", value);
            }
        }
        public bool Active
        {
            get
            {
                return ServerProcess == null ? false : ServerProcess.HasExited ? false : true;
            }
            set
            {
                if (value) StartServer();
                //Manifest.GetConfigByKey("Active").Value = value + "";
            }
        }
        public Difficulty Difficulty
        {
            get
            {
                return (Difficulty) Enum.Parse(typeof(Difficulty), ServerProperties.GetPropertyByKey("difficulty", "easy").Value.ToString(), true);
            }
            set
            {
                ServerProperties.SetValue("difficulty", value);
            }
        }
        public string InstallJar
        {
            get
            {
                return Manifest.GetConfigByKey("InstallJar").Value;
            }
            set
            {
                Manifest.GetConfigByKey("InstallJar").Value = value;
            }
        }
        public string StartingJar
        {
            get
            {
                return Manifest.GetConfigByKey("StartingJar").Value;
            }
            set
            {
                Manifest.GetConfigByKey("StartingJar").Value = value;
            }
        }


        public bool IsEmpty
        {
            get
            {
                if (Manifest == null) { Console.WriteLine("Manifest Was NULL"); }
                else
                {
                    if (string.IsNullOrWhiteSpace(Name)) Console.WriteLine("Name Was NULL or Empty");
                    if (Port == 0) Console.WriteLine("Port Was 0");
                    if (MaxPlayers == 0) Console.WriteLine("MaxPlayers Was 0");
                }
                if (Manifest == null || string.IsNullOrWhiteSpace(Name) || Port == 0 || MaxPlayers == 0)
                {
                    return true;
                }

                return false;
            }
        }

        public List<string> ServerConsole = new List<string>();

        private void StartServer()
        {
            ServerConsole.Clear();
            string path = GenerateRuntimeCommands();
            Console.WriteLine(path);
            ServerProcess = new Process() { StartInfo = new ProcessStartInfo() { FileName = path, UseShellExecute = false, RedirectStandardInput = true, RedirectStandardOutput = true } };
            ServerProcess.Start();
            Task.Run(() =>
            {
                while (!ServerProcess.HasExited)
                {
                    while (!ServerProcess.StandardOutput.EndOfStream)
                    {
                        string text = ServerProcess.StandardOutput.ReadLine();
                        ServerConsole.Add(text);
                        Console.WriteLine(text);
                    }
                }
            });
        }

        public enum StopMethod
        {
            Standard,
            Kill,
            Restart
        }

        public void StopServer(StopMethod method = StopMethod.Standard)
        {
            Active = false;
            switch (method)
            {
                case StopMethod.Standard:
                    SendCommand("stop");
                    break;
                case StopMethod.Kill:
                    ServerProcess.Kill();
                    break;
                case StopMethod.Restart:
                    SendCommand("stop");
                    ServerProcess.WaitForExit();
                    StartServer();
                    break;
            }
        }

        public void SendCommand(string cmd)
        {
            if (ServerProcess != null)
            {
                if (!ServerProcess.HasExited)
                {
                    ServerProcess.StandardInput.WriteLine(cmd);
                }
            }
            Console.WriteLine($"Attempting Command: {cmd}");
        }

        private string GenerateRuntimeCommands()
        {
            string path = "";
            if (CurrentOS.isWindows)
            {
                path = Path.Combine(ServerDirectory, "start.bat");
            }
            else if (CurrentOS.isLinux || CurrentOS.isMacOS)
            {
                path = Path.Combine(ServerDirectory, "start.sh");
            }
            using (var writer = new StreamWriter(path, false))
            {
                if (CurrentOS.isWindows)
                    writer.WriteLine($"{ServerDirectory.Split('\\')[0].Replace("\\", "")}");
                writer.WriteLine($"cd \"{ServerDirectory}\"");
                writer.WriteLine($"java -Xmx{MaxRam.Replace("B", "")} -Xms{MinRam.Replace("B", "")} {JavaArguments} -jar \"{StartingJar}\" {MinecraftArguments}");
                //writer.WriteLine($"pause");
                writer.Flush();
                writer.Dispose();
                writer.Close();
            }
            return path;
        }

    }
}
