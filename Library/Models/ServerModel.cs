using ChaseLabs.CLConfiguration.List;
using com.drewchaseproject.net.asp.mc.OlegMC.Library.Data;
using com.drewchaseproject.net.asp.mc.OlegMC.Library.Utilities;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using static com.drewchaseproject.net.asp.mc.OlegMC.Library.Data.Values;

namespace com.drewchaseproject.net.asp.mc.OlegMC.Library.Models
{

    /// <summary>
    /// All the information that a healthy server needs to grow up.
    /// </summary>
    public class ServerModel
    {
        private static readonly ChaseLabs.CLLogger.Interfaces.ILog log = ChaseLabs.CLLogger.LogManger.Init().SetLogDirectory(Values.Singleton.LogFile);
        /// <summary>
        /// Manifest file for server specific settings<br />
        /// IE: Starting jar file, server name, eula, starting and stopping functions, etc.
        /// </summary>
        public ConfigManager Manifest { get; set; }

        /// <summary>
        /// Gets the Root Directory of the Server
        /// </summary>
        public string ServerDirectory => Directory.GetParent(Manifest.PATH).FullName;

        /// <summary>
        /// Returns the Server Process when its running.<br />
        /// Returns Null if server is off.
        /// </summary>
        public Process ServerProcess { private set; get; }

        /// <summary>
        /// Gets a list of all .jar files in the <see cref="ServerDirectory"/>
        /// </summary>
        public string[] Jars
        {
            get
            {
                List<string> l = new List<string>();
                foreach (string s in Directory.GetFiles(ServerDirectory, "*.jar", SearchOption.TopDirectoryOnly))
                {
                    l.Add(s);
                }
                return l.ToArray();
            }
        }

        /// <summary>
        /// Set to true to accept EULA. <br />
        /// Gets rather the EULA has been accepted or not.
        /// </summary>
        public bool AcceptedEULA
        {
            get
            {
                try
                {

                    using (StreamReader reader = new StreamReader(Path.Combine(ServerDirectory, "eula.txt")))
                    {
                        while (!reader.EndOfStream)
                        {
                            string text = reader.ReadLine();
                            if (text.StartsWith("#"))
                            {
                                continue;
                            }

                            if (text.StartsWith("eula="))
                            {
                                return !bool.TryParse(text.Replace("eula=", "").Trim(), out bool b) ? false : b;
                            }
                        }
                    }
                }
                catch (FileNotFoundException)
                {
                    return false;
                }
                catch (Exception e)
                {
                    log.Info(e.StackTrace);
                    return false;
                }
                return false;
            }

            set
            {
                using (StreamWriter writer = new StreamWriter(Path.Combine(ServerDirectory, "eula.txt"), false))
                {
                    writer.WriteLine("# Generated by Oleg MC");
                    writer.WriteLine("# By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula).");
                    writer.WriteLine($"# {DateTime.UtcNow}");
                    writer.Write($"eula={value.ToString().ToLower()}");
                    writer.Flush();
                    writer.Dispose();
                    writer.Close();
                }
            }
        }
        /// <summary>
        /// Gets the Current number of players on the server
        /// </summary>
        public int CurrentPlayers { get; private set; }
        /// <summary>
        /// Gets the current ammount of ram used by the server
        /// </summary>
        public decimal CurrentRamUsage { get; private set; }

        private ServerPropertyList _serverProperties = null;
        /// <summary>
        /// Gets the server.properties file in the <see cref="ServerDirectory"/>
        /// </summary>
        public ServerPropertyList ServerProperties
        {
            get
            {
                if (_serverProperties == null)
                {
                    _serverProperties = new ServerPropertyList(Path.Combine(ServerDirectory, "server.properties"));
                }

                return _serverProperties;
            }
        }

        /// <summary>
        /// Gets the Java Arguments to run the server from the <see cref="Manifest"/>
        /// </summary>
        public string JavaArguments
        {
            get => Manifest.GetConfigByKey("JavaArgument").Value;
            set => Manifest.GetConfigByKey("JavaArgument").Value = string.IsNullOrWhiteSpace(value) ? DefaultJavaArguments : value.Contains(DefaultJavaArguments) ? value : value + " " + DefaultJavaArguments;
        }

        /// <summary>
        /// Gets the Minecraft Arguments to run the server from the <see cref="Manifest"/>
        /// </summary>
        public string MinecraftArguments
        {
            get => Manifest.GetConfigByKey("MinecraftArgument").Value;
            set
            {
                if (value == null)
                {
                    value = "nogui";
                }

                if (value == "")
                {
                    value = "nogui";
                }

                if (!value.Contains("nogui"))
                {
                    value += " nogui";
                }

                Manifest.GetConfigByKey("MinecraftArgument").Value = value;
            }
        }
        /// <summary>
        /// Gets the Maximum Ram Allocation to the server from the <see cref="Manifest"/>
        /// </summary>
        public string MaxRam
        {
            get => Manifest.GetConfigByKey("MaxRam").Value;
            set => Manifest.GetConfigByKey("MaxRam").Value = value;
        }
        /// <summary>
        /// Gets the Minimum Ram Allocation to the server from the <see cref="Manifest"/>
        /// </summary>
        public string MinRam
        {
            get => Manifest.GetConfigByKey("MinRam").Value;
            set => Manifest.GetConfigByKey("MinRam").Value = value;
        }
        /// <summary>
        /// Gets the server display name in the UI from the <see cref="Manifest"/>
        /// </summary>
        public string Name
        {
            get => Manifest.GetConfigByKey("Name").Value;
            set => Manifest.GetConfigByKey("Name").Value = value;
        }
        /// <summary>
        /// Gets and Sets the server port in the <see cref="ServerProperties"/>
        /// </summary>
        public int Port
        {
            get
            {
                ServerProperties.Read();
                return int.Parse(ServerProperties.GetPropertyByKey("server-port", "25565").Value.ToString());
            }
            set => ServerProperties.SetValue("server-port", value);
        }
        /// <summary>
        /// Gets and Sets the world file name in the <see cref="ServerProperties"/>
        /// </summary>
        public string LevelName
        {
            get
            {
                ServerProperties.Read();
                return ServerProperties.GetPropertyByKey("level-name", "world").Value.ToString();
            }
            set => ServerProperties.SetValue("level-name", value);
        }

        /// <summary>
        /// Gets and Sets the Level Seed in the <see cref="ServerProperties"/>
        /// </summary>
        public string Seed
        {
            get
            {
                ServerProperties.Read();
                return ServerProperties.GetPropertyByKey("level-seed", "").Value.ToString();
            }
            set => ServerProperties.SetValue("level-seed", value);
        }

        /// <summary>
        /// Gets and Sets the Maximum number of players in the <see cref="ServerProperties"/>
        /// </summary>
        public int MaxPlayers
        {
            get
            {
                ServerProperties.Read();
                if (int.Parse(ServerProperties.GetPropertyByKey("max-players", "20").Value.ToString()) == 0)
                {
                    MaxPlayers = 20;
                }

                return int.Parse(ServerProperties.GetPropertyByKey("max-players", "20").Value.ToString());
            }
            set => ServerProperties.SetValue("max-players", value);
        }
        /// <summary>
        /// If set to true the server will start.
        /// Returns the if the server is currently Started or not.
        /// </summary>
        public bool Active
        {
            get => ServerProcess == null ? false : ServerProcess.HasExited ? false : true;
            set
            {
                if (value)
                {
                    StartServer();
                }
                //Manifest.GetConfigByKey("Active").Value = value + "";
            }
        }
        /// <summary>
        /// Gets the server difficulty from the <see cref="Values.Difficulty"/> Enum
        /// </summary>
        public Difficulty Difficulty
        {
            get => (Difficulty)Enum.Parse(typeof(Difficulty), ServerProperties.GetPropertyByKey("difficulty", "easy").Value.ToString(), true);
            set => ServerProperties.SetValue("difficulty", value);
        }
        /// <summary>
        /// Gets the Starting Jar file from the <see cref="Manifest"/>
        /// </summary>
        public string StartingJar
        {
            get => Manifest.GetConfigByKey("StartingJar").Value;
            set => Manifest.GetConfigByKey("StartingJar").Value = value;
        }

        /// <summary>
        /// Checks if the Manifest exists
        /// </summary>
        public bool IsEmpty
        {
            get
            {
                if (Manifest == null) { log.Info("Manifest Was NULL"); }
                else
                {
                    if (string.IsNullOrWhiteSpace(Name))
                    {
                        log.Info("Name Was NULL or Empty");
                    }

                    if (Port == 0)
                    {
                        log.Info("Port Was 0");
                    }

                    if (MaxPlayers == 0)
                    {
                        log.Info("MaxPlayers Was 0");
                    }
                }
                if (Manifest == null || string.IsNullOrWhiteSpace(Name) || Port == 0 || MaxPlayers == 0)
                {
                    return true;
                }

                return false;
            }
        }
        /// <summary>
        /// Returns the Server Console Log as a string array
        /// </summary>
        public List<string> ServerConsole = new List<string>();

        /// <summary>
        /// Starts the Server.<br/>
        /// Also See <seealso cref="Active"/>
        /// </summary>
        private void StartServer()
        {
            ServerConsole.Clear();
            string path = GenerateRuntimeCommands();
            log.Info(path);
            ServerProcess = new Process() { StartInfo = new ProcessStartInfo() { FileName = path, UseShellExecute = false, RedirectStandardInput = true, RedirectStandardOutput = true } };
            ServerProcess.Start();
            Task.Run(() =>
            {
                while (!ServerProcess.HasExited)
                {
                    while (!ServerProcess.StandardOutput.EndOfStream)
                    {
                        string text = ServerProcess.StandardOutput.ReadLine();
                        ServerConsole.Add(text);
                        log.Info(text);
                    }
                }
            });
        }

        /// <summary>
        /// Standard: runs the "stop" command in the server console.<br/>
        /// Kill: Kills the server process, only done if the server is unresponsive.<br/>
        /// Restart: Runs the standard Stop Method, waits for the server to stop and then starts it back up.
        /// </summary>
        public enum StopMethod
        {
            Standard,
            Kill,
            Restart
        }
        /// <summary>
        /// Stops the Server with <see cref="StopMethod"/><br/>
        /// See <seealso cref="StopMethod"/> for information on what each Stop Method does.
        /// </summary>
        /// <param name="method">Default is Standard</param>
        public void StopServer(StopMethod method = StopMethod.Standard)
        {
            if (Active && ServerProcess != null)
            {
                Active = false;
                switch (method)
                {
                    case StopMethod.Standard:
                        SendCommand("stop");
                        break;
                    case StopMethod.Kill:
                        ServerProcess.Kill();
                        break;
                    case StopMethod.Restart:
                        SendCommand("stop");
                        ServerProcess.WaitForExit();
                        StartServer();
                        break;
                }
            }
        }
        /// <summary>
        /// Sends command to the server
        /// </summary>
        /// <param name="cmd"></param>
        public void SendCommand(string cmd)
        {
            //ServerConsole.Add(cmd);
            if (ServerProcess != null)
            {
                if (!ServerProcess.HasExited)
                {
                    ServerProcess.StandardInput.WriteLine(cmd);
                }
            }
            log.Info($"Attempting Command: {cmd}");
        }

        /// <summary>
        /// Creates a .bat or .sh file to start the server.<br/>
        /// This is done because the execution of the jar file will execute from the running location.<br/>
        /// So if running as normal process it will create the mc-server at the olegmc application location.
        /// </summary>
        /// <returns></returns>
        private string GenerateRuntimeCommands()
        {
            string path = "";
            if (CurrentOS.isWindows)
            {
                path = Path.Combine(ServerDirectory, "start.bat");
            }
            else if (CurrentOS.isLinux || CurrentOS.isMacOS)
            {
                path = Path.Combine(ServerDirectory, "start.sh");
            }
            using (StreamWriter writer = new StreamWriter(path, false))
            {
                if (CurrentOS.isWindows)
                {
                    writer.WriteLine($"{ServerDirectory.Split('\\')[0].Replace("\\", "")}");
                }

                writer.WriteLine($"cd \"{ServerDirectory}\"");
                writer.WriteLine($"java -Xmx{MaxRam.Replace("B", "")} -Xms{MinRam.Replace("B", "")} {JavaArguments} -jar \"{StartingJar}\" {MinecraftArguments}");
                writer.Flush();
                writer.Dispose();
                writer.Close();
            }
            return path;
        }
        /// <summary>
        /// Deletes the 
        /// </summary>
        public void DeleteServer()
        {
            if (ServerProcess != null && Active)
            {
                StopServer(StopMethod.Kill);
                System.Threading.Thread.Sleep(500);
            }
            Directory.Delete(ServerDirectory, true);
            Values.Singleton.SelectedServer = null;
        }
        /// <summary>
        /// Installs Forge using the specified starting jar
        /// </summary>
        public void InstallForge()
        {
            log.Debug("Installing Forge");
            Process installProcess = new Process()
            {
                StartInfo = new ProcessStartInfo()
                {
                    FileName = "java",
                    Arguments = $"-jar \"{Path.Combine(ServerDirectory, StartingJar)}\" --installServer \"{ServerDirectory}\"",
                    UseShellExecute = false,
                    RedirectStandardInput = true,
                    RedirectStandardOutput = true
                }
            };
            log.Debug($"running (java -jar \"{Path.Combine(ServerDirectory, StartingJar)}\" --installServer \"{ServerDirectory}\")");
            installProcess.Start();
            log.Debug("Started");
            installProcess.Exited += (s, e) =>
            {
                log.Debug("DONE");
                System.Threading.Thread.Sleep(500);
                if (File.Exists(StartingJar))
                {
                    File.Delete(StartingJar);
                }

                System.Threading.Thread.Sleep(250);
                Jars.ToList().ForEach(jar =>
                {
                    if (jar.StartsWith("forge"))
                    {
                        StartingJar = jar;
                    }
                });
                ServerConsole.Clear();
                ServerConsole.Add("Forge Fully Installed");
                ServerConsole.Add("Removing Installer and Setting Starting Jar");
            };
            Task.Run(() =>
            {
                while (!installProcess.HasExited)
                {
                    while (!installProcess.StandardOutput.EndOfStream)
                    {
                        string text = installProcess.StandardOutput.ReadLine();
                        ServerConsole.Add(text);
                    }
                }
            });
            installProcess.WaitForExit();

        }

        public ModListModel GetServerMods()
        {

        }

    }
}
